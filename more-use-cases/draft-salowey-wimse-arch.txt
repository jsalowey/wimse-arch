



wimse                                                         J. Salowey
Internet-Draft                                                    Venafi
Intended status: Informational                              Y. Rosomakho
Expires: 3 September 2024                                               
                                                           H. Tschofenig
                                                                 Siemens
                                                            2 March 2024


  Workload Identity in a Multi System Environment (WIMSE) Architecture
                    draft-salowey-wimse-arch-latest

Abstract

   TODO Abstract

Discussion Venues

   This note is to be removed before publishing as an RFC.

   Discussion of this document takes place on the Workload Identity in
   Multi System Environments Working Group mailing list
   (wimse@ietf.org), which is archived at
   https://mailarchive.ietf.org/arch/browse/wimse/.

   Source for this draft and an issue tracker can be found at
   https://github.com/jsalowey/wimse-arch.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 3 September 2024.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
     2.1.  Definitions
   3.  Use Cases
     3.1.  Initial Workload Identity
       3.1.1.  Attestation
       3.1.2.  Identity Credentials
     3.2.  Basic Service Authentication
     3.3.  Security Context Establishment and Propagation
     3.4.  Delegation and Impersonation
     3.5.  Asynchronous and Batch Requests
   4.  Architecture
   5.  Security Considerations
     5.1.  Threat Model
       5.1.1.  Traffic Interception
       5.1.2.  Information Disclosure
       5.1.3.  Workload Compromise
     5.2.  Mitigating Token Theft
   6.  IANA Considerations
   7.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   TODO Introduction

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

2.1.  Definitions

   *  Workload

   A workload is a running instance of software executing for a specific
   purpose that interacts with other parts of a larger system.  A
   workload may exist for a very short durations of time (nanoseconds)
   and run for a specific purpose such as to provide a response to an
   API request.  Other kinds of workloads may execute for a very long
   duration such as months or years - examples include database services
   and machine learning training jobs.

3.  Use Cases

3.1.  Initial Workload Identity

   Typically a workload obtains its identity early in its lifecycle.
   This identity is sometimes referred to as the "bottom turtle" on
   which further identity is built.  Some common mechanisms for
   obtaining this initial identity include:

   *  File System projection - in this mechanisms the identity is
      provisioned to the workload as an entity in the filesystem.

   *  Local API - the identity is provided through an api such as a
      local domain socket (SPIFFE) or local Network API call (Cloud
      Provider Metadata Server)

   *  Environment Injection - identity may also be injected into the
      workloads execution environment.

3.1.1.  Attestation

3.1.2.  Identity Credentials

   The identity is provisioned to the workload as a set of credentials.
   There are two main types of workload credentials: bearer tokens and
   X.509 certificates.

   Bearer tokens are tokens presented to another party as proof of
   identity.  They are typically signed to prevent forgery, however
   since these credentials are not bound to other information its
   possible that they could be stolen and reused elsewhere.

   X.509 certificate credentials consist of two parts, a public key
   certificate that is a signed data structure that contains a public
   key and identity information and a private key which.  The
   certificate is sent during authentication, however the private key is
   kept secret and only used in cryptographic computation to to prove
   that the presenter has access to the private that corresponds to the
   public key in the certificate.

3.2.  Basic Service Authentication

   One of the most basic use cases for workload identity is for
   authenticating one workload to another such as in the case where one
   service is making a request of another service within a larger
   application.  Even in this simple case the identity of the workload
   is often a composite of many attributes such as:

   *  Service Name

   *  Instance Name

   *  Role

   *  Environment

   *  Trust Domain

   *  Software Attestation

   *  Hardware Attestation

   These attributes are used for various purposes:

   *  ensuring the request is made to the correct service or service
      instance

   *  authorizing access to APIs and resources

   *  providing an audit train of requests within a system

   *  providing context for other decisions made within a service

   There are several methods defined to perform this authentication.
   Some of the most common include:

   *  TLS authentication of the server using X.509 certificates and
      bearer token JWTs within an HTTP or other protocol request.

   *  Mutual TLS authentication using X.509 certificate for both client
      and server

   *  TLS authentication of the server and HTTP request signing using a
      secret key

3.3.  Security Context Establishment and Propagation

   In a typical system of workloads additional information is needed in
   order for the workload to perform its function.  For example, it is
   common for a workload to require information about a user or other
   entity that originated the request.  Other types of information may
   include information about the hardware or software that the workload
   is running or information about what processing and validation has
   already been done to the request.  This type of information is part
   of the security context that the workload uses during authorization,
   accounting and auditing.  This context is propagated and possibly
   augmented from workload to workload using tokens.  Workload identity
   comes into play to ensure that the information in the context can
   only be used by an authorized workload and that the context
   information originated from an authorized workload.

3.4.  Delegation and Impersonation

3.5.  Asynchronous and Batch Requests

4.  Architecture

5.  Security Considerations

5.1.  Threat Model

5.1.1.  Traffic Interception

   Workloads communicating within an an applications may face different
   threats to traffic interception in different deployments.  In many
   deployments security controls are deployed for internal
   communications at lower layers to reduce the risk of traffic
   observation and modification for network communications.  When a
   security layer such as TLS is deployed in these environments TLS may
   be termiated in various places including the workload itself and in
   various middleware devices such as load balancers, gateways, proxies,
   and firewalls.  Therefore protection is provided only between each
   adjacent pair of TLS endpoints.  There are no guarantees of
   confidentiality, integrity and correct identity passthrough in those
   middleware devices and services.

5.1.2.  Information Disclosure

   Observation and interception of network traffic is not the only means
   of disclosure in these systems.  Other vectors of information leakage
   is through disclosure in log files and other observability and
   troubleshooting mechanisms.  For example, an application may log the
   contents of HTTP headers containing JWT bearer tokens.  The
   information in this logs may be made available to other systems with
   less stringent access controls which may result in this token falling
   into an attackers hands who then uses it to compromise a system.
   This creates privacy risks and potential surface for reconnaissance
   attacks.  If observed tokens can be reused, this also may allow
   attackers to impersonate workloads.

5.1.3.  Workload Compromise

   Even the most well-designed and implemented workloads may contain
   security flaws that allow an attacker to gain limited or full
   compromise.  For example, a server side request forgery may result in
   the ability for an attacker to force the workload to make requests of
   other parts of a system even though the rest of the workload
   functionality may be unaffected.  An attacker with this advantage may
   be able to utilize privileges of the compromised workload to attack
   other parts of the system.  Therefore it is important that
   communicating workloads apply the principle of least privilege
   through security controls such as authorization.

5.2.  Mitigating Token Theft

6.  IANA Considerations

   This document has no IANA actions.

7.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Joseph Salowey
   Venafi
   Email: joe@salowey.net


   Yaroslav Rosomakho


   Hannes Tschofenig
   Siemens
   Email: hannes.tschofenig@gmx.net
